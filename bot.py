import asyncio
import logging
import re
import time
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.throttling import ThrottlingMiddleware

###############################################################################
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
###############################################################################
BOT_TOKEN = "7964880890:AAEnKzFiMKM3Ft8_5tBuJE5asx9Q2YXih3M"
CHANNEL_ID = -1002193668243  # ID –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
CHANNEL_INVITE_LINK = "https://t.me/+RjNhwct5B1wxOTEy"
REVIEWS_CHANNEL_LINK = "https://t.me/+xxFCoslNh5gwY2Vi"
ORDER_BOT_LINK = "https://t.me/deliverygpt_bot"
PHOTO_FILE_ID = "AgACAgIAAxkBAAMbZ51movDjAAGyhx8jtw2Up1MUdB2VAAJu7zEbEF3pSBJhmyAAAfnKfwEAAwIAA3gAAzYE"

# ID –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
PRIVATE_INFO_CHANNEL_ID = -1002458868061

# –í—Ä–µ–º—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è ‚Äì 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)
INACTIVITY_LIMIT = 600  
CHECK_INACTIVITY_INTERVAL = 30

# –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äì 24 —á–∞—Å–∞ (86400 —Å–µ–∫—É–Ω–¥)
GIFT_DELAY = 86400

###############################################################################
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
###############################################################################
logging.basicConfig(level=logging.INFO)

###############################################################################
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
###############################################################################
from aiogram.client.bot import DefaultBotProperties
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
users_data = {}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class CollectData(StatesGroup):
    phone = State()
    email = State()

def update_user_activity(user_id: int):
    if user_id not in users_data:
        users_data[user_id] = {
            "last_activity": 0,
            "inactivity_msg_sent": False,
            "subscribed_at": 0,
            "gift_msg_sent": False,
            "promo_received": False
        }
    users_data[user_id]["last_activity"] = time.time()

async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return False

###############################################################################
# –û–ë–†–ê–ë–û–¢–ß–ò–ö /start
###############################################################################
@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    update_user_activity(user_id)
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_firstname = message.from_user.first_name or "–¥—Ä—É–≥"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_INVITE_LINK)],
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="i_subscribed")],
        [InlineKeyboardButton(text="‚úçüèº –û—Ç–∑—ã–≤—ã", url=REVIEWS_CHANNEL_LINK)]
    ])
    
    caption_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_firstname}!\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–õ–ö–û–†–ê–ö–ï–¢–êüöÄ\n"
        f"–ú—ã –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–ø–∏—Ç–∫–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º.\n\n"
        f"‚ú® –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ:\n"
        f"üî• –ì–æ—Ä—è—á–∏—Ö –∞–∫—Ü–∏–π –∏ —Å–∫–∏–¥–æ–∫.\n"
        f"üçæ –ù–æ–≤–∏–Ω–æ–∫ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.\n"
        f"üéâ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n\n"
        f"‚¨á–î–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª‚¨á"
    )
    
    await message.answer_photo(photo=PHOTO_FILE_ID, caption=caption_text, reply_markup=keyboard)

###############################################################################
# –û–ë–†–ê–ë–û–¢–ß–ò–ö /help
###############################################################################
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await message.answer(help_text)

###############################################################################
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø"
###############################################################################
@dp.callback_query(F.data == "i_subscribed")
async def on_subscribed_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    update_user_activity(user_id)
    if await check_subscription(user_id):
        users_data[user_id]["subscribed_at"] = time.time()
        text_subscribed = "üëÄ –í–∏–∂—É –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞!\n\n–°–ø–µ—à–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üëá"
        keyboard_order = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü•Ç –ó–∞–∫–∞–∑–∞—Ç—å", url=ORDER_BOT_LINK)],
            [InlineKeyboardButton(text="‚úçüèº –û—Ç–∑—ã–≤—ã", url=REVIEWS_CHANNEL_LINK)]
        ])
        await callback_query.message.answer(text_subscribed, reply_markup=keyboard_order)
    else:
        text_not_subscribed = "üôà –ù–µ –≤–∏–∂—É —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª ¬´–ê–ª–∫–æ—Ä–∞–∫–µ—Ç–∞¬ªüöÄ\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ –¥–æ–º."
        await callback_query.message.answer(text_not_subscribed)
    await callback_query.answer()

###############################################################################
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–î–ê, –•–û–ß–£ –ü–û–î–ê–†–û–ö!"
###############################################################################
@dp.callback_query(F.data == "get_gift")
async def on_get_gift(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    update_user_activity(user_id)
    await state.set_state(CollectData.phone)
    await callback_query.answer()
    await ask_phone(callback_query.message)

###############################################################################
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ü–†–û–°–ê –¢–ï–õ–ï–§–û–ù–ê –ò EMAIL
###############################################################################
async def ask_phone(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç').", reply_markup=kb)

async def ask_email(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–ü–æ–¥–∞—Ä–æ–∫ —É–∂–µ –±–ª–∏–∑–∫–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—åü§èüèº –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –µ–º—ç–π–ª –∏ –ø–æ–¥–∞—Ä–æ–∫ —Ç–≤–æ–π! üéÅ", reply_markup=kb)

###############################################################################
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –í –°–û–°–¢–û–Ø–ù–ò–ò –°–ë–û–†–ê –î–ê–ù–ù–´–•
###############################################################################
@dp.message(CollectData.phone)
async def process_phone(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    update_user_activity(user_id)
    if message.contact:
        phone = message.contact.phone_number
        await state.update_data(phone=phone)
        await message.answer(f"–ü—Ä–∏–Ω—è–ª —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}", reply_markup=ReplyKeyboardRemove())
        await state.set_state(CollectData.email)
        await ask_email(message)
    elif message.text == "–ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    else:
        text = message.text.strip()
        phone_pattern = r'^\+?\d{9,15}$'
        if re.match(phone_pattern, text):
            await state.update_data(phone=text)
            await message.answer(f"–ü—Ä–∏–Ω—è–ª —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {text}", reply_markup=ReplyKeyboardRemove())
            await state.set_state(CollectData.email)
            await ask_email(message)
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –∏ –≤–≤–µ–¥–∏ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ù–∞–∑–∞–¥'.")

@dp.message(CollectData.email)
async def process_email(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    update_user_activity(user_id)
    if message.text == "–ù–∞–∑–∞–¥":
        await state.set_state(CollectData.phone)
        await ask_phone(message)
    else:
        text = message.text.strip()
        email_pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
        if re.match(email_pattern, text):
            await state.update_data(email=text)
            data = await state.get_data()
            phone = data.get("phone", "")
            email = data.get("email", "")
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! Email –ø—Ä–∏–Ω—è—Ç.", reply_markup=ReplyKeyboardRemove())
            if not users_data[user_id]["promo_received"]:
                promo_message = (
                    "–õ–æ–≤–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫! üéÅ –°–∫–∏–¥–∫–∞ 10% –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑! –ù–∞–∑–æ–≤–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ–º–æ–∫–æ–¥ <tg-spoiler>–ü–û–î–ü–ò–°–ö–ê24</tg-spoiler>"
                )
                await message.answer(promo_message)
                users_data[user_id]["promo_received"] = True
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª
                user_info = (
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.first_name}\n"
                    f"–ù–æ–º–µ—Ä: {phone}\n"
                    f"Email: {email}"
                )
                try:
                    await bot.send_message(chat_id=PRIVATE_INFO_CHANNEL_ID, text=user_info)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è {user_id}: {e}")
            await state.clear()
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ –Ω–∞–∂–º–∏ '–ù–∞–∑–∞–¥'.")

###############################################################################
# –§–£–ù–ö–¶–ò–Ø: –û–¢–ü–†–ê–í–ö–ê –ü–û–î–ê–†–û–ß–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø –ß–ï–†–ï–ó 24 –ß–ê–°–ê
###############################################################################
async def send_gift_message(user_id: int):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –í—á–µ—Ä–∞ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, –∞ —Å–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å –¥–ª—è —Ç–µ–±—è —É–∂–µ –∫–æ–µ-—á—Ç–æ –µ—Å—Ç—åüéÅ\n"
        "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ? üòÅ"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —Ö–æ—á—É –ø–æ–¥–∞—Ä–æ–∫! üéÅ", callback_data="get_gift")]
    ])
    try:
        await bot.send_message(chat_id=user_id, text=text, reply_markup=kb)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id}: {e}")

###############################################################################
# –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê
###############################################################################
async def background_tasks():
    while True:
        now = time.time()
        for user_id, data in list(users_data.items()):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏
            if not data["inactivity_msg_sent"] and data.get("subscribed_at", 0) == 0:
                if now - data["last_activity"] > INACTIVITY_LIMIT:
                    try:
                        inactivity_text = (
                            "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ–ø–ª–∞—á–µ–Ω! –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å! –ö—É—Ä—å–µ—Ä —É–∂–µ –≤—ã–µ–∑–∂–∞–µ—Ç!\n\n\n"
                            "–í–æ–∑–º–æ–∂–Ω–æ –º—ã –ø–æ—Ç–æ—Ä–æ–ø–∏–ª–∏—Å—å? –ö–∞–∂–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, –∏—Å–ø—Ä–∞–≤–∏–º? –ù–∞–∂–º–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ —Å–¥–µ–ª–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑! ü•Ç"
                        )
                        await bot.send_message(chat_id=user_id, text=inactivity_text)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏ –¥–ª—è {user_id}: {e}")
                    data["inactivity_msg_sent"] = True
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –∏ –ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞, –∞ –ø–æ–¥–∞—Ä–æ–∫ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω
            if data.get("subscribed_at", 0) > 0 and not data["gift_msg_sent"] and not data.get("promo_received", False):
                time_since_sub = now - data["subscribed_at"]
                if time_since_sub >= GIFT_DELAY:
                    await send_gift_message(user_id)
                    data["gift_msg_sent"] = True
        await asyncio.sleep(CHECK_INACTIVITY_INTERVAL)

###############################################################################
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
###############################################################################
async def main():
    # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
    dp.message.middleware(ThrottlingMiddleware(rate_limit=1, rate_period=1))
    asyncio.create_task(background_tasks())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())