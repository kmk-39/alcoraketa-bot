import asyncio
import logging
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           ReplyKeyboardMarkup, KeyboardButton,
                           ReplyKeyboardRemove)
from aiogram.filters import CommandStart

###############################################################################
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
###############################################################################
BOT_TOKEN = "7691178570:AAHVzzPYPbC5bbnp9mpHrEbVxjmgtjCDYNc"

CHANNEL_ID = -1002193668243  # –ö–∞–Ω–∞–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
CHANNEL_INVITE_LINK = "https://t.me/+RjNhwct5B1wxOTEy"

REVIEWS_CHANNEL_LINK = "https://t.me/+VuaLFy5u-twwODRi"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –æ—Ç–∑—ã–≤–æ–≤
ORDER_BOT_LINK = "https://t.me/deel1very_bot"           # –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞

# file_id –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –≠–¢–û–ú–£ –±–æ—Ç—É)
PHOTO_FILE_ID = "AgACAgIAAxkBAAMbZ51movDjAAGyhx8jtw2Up1MUdB2VAAJu7zEbEF3pSBJhmyAAAfnKfwEAAwIAA3gAAzYE"

# –í—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ¬´–±–µ–∑–¥–µ–π—Å—Ç–≤—É—é—â–∏–º¬ª (–≤ —Å–µ–∫.)
INACTIVITY_LIMIT = 120  # 2 –º–∏–Ω—É—Ç—ã
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –∫–∞–∂–¥—ã–µ X —Å–µ–∫—É–Ω–¥
CHECK_INACTIVITY_INTERVAL = 30

# –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å ¬´—Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–∞—Ä–∫–µ¬ª?
# 24 —á–∞—Å–∞ = 86400 —Å–µ–∫
GIFT_DELAY = 86400

###############################################################################
# –õ–û–ì–ò
###############################################################################
logging.basicConfig(level=logging.INFO)

###############################################################################
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
###############################################################################
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
users_data = {}  # user_id -> dict —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏

"""
users_data[user_id] = {
    "last_activity": float,           # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    "inactivity_msg_sent": bool,      # –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ 1 —Ä–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏
    "subscribed_at": float,           # –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
    "gift_msg_sent": bool,            # –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–∞—Ä–∫–µ
    "collect_state": None / "phone" / "email",  # —Å—Ç–∞–¥–∏—è —Å–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–∞
}
"""

###############################################################################
# –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ö–ò
###############################################################################
async def check_subscription(user_id: int) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ user_id –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª CHANNEL_ID.
    """
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

###############################################################################
# –û–ë–ù–û–í–õ–Ø–ï–ú –í–†–ï–ú–Ø –ü–û–°–õ–ï–î–ù–ï–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò
###############################################################################
def update_user_activity(user_id: int):
    if user_id not in users_data:
        users_data[user_id] = {
            "last_activity": 0,
            "inactivity_msg_sent": False,
            "subscribed_at": 0,
            "gift_msg_sent": False,
            "collect_state": None
        }
    users_data[user_id]["last_activity"] = asyncio.get_event_loop().time()

###############################################################################
# –•–ï–ù–î–õ–ï–† /start
###############################################################################
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    update_user_activity(user_id)

    user_firstname = message.from_user.first_name or "–¥—Ä—É–≥"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîó–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_INVITE_LINK)
        ],
        [
            InlineKeyboardButton(text="‚úÖ–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="i_subscribed")
        ],
        [
            InlineKeyboardButton(text="‚úçüèº–û—Ç–∑—ã–≤—ã", url=REVIEWS_CHANNEL_LINK)
        ]
    ])

    caption_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_firstname}!\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–õ–ö–û–†–ê–ö–ï–¢–êüöÄ\n"
        f"–ú—ã –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–ø–∏—Ç–∫–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º.\n\n"
        f"‚ú® –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ:\n"
        f"üî• –ì–æ—Ä—è—á–∏—Ö –∞–∫—Ü–∏–π –∏ —Å–∫–∏–¥–æ–∫.\n"
        f"üçæ –ù–æ–≤–∏–Ω–æ–∫ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.\n"
        f"üéâ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n\n"
        f"‚¨á –î–õ–Ø –ó–ê–ö–ê–ó–ê –ü–û–î–ü–ò–®–ò–°–¨ –ù–ê –ö–ê–ù–ê–õ ‚¨á"
    )

    await message.answer_photo(
        photo=PHOTO_FILE_ID,
        caption=caption_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

###############################################################################
# –•–ï–ù–î–õ–ï–† –õ–Æ–ë–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø -> –û–ë–ù–û–í–õ–Ø–ï–ú –ê–ö–¢–ò–í–ù–û–°–¢–¨
###############################################################################
@dp.message()
async def any_message_handler(message: types.Message):
    user_id = message.from_user.id
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    update_user_activity(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö "collect_state"
    state = users_data[user_id]["collect_state"]

    if state == "phone":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –º–æ–∂–µ—Ç –±—ã—Ç—å user –ø—Ä–∏—Å–ª–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç?
        if message.contact and message.contact.phone_number:
            phone = message.contact.phone_number
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            await message.answer(f"–ü—Ä–∏–Ω—è–ª —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É email
            users_data[user_id]["collect_state"] = "email"
            await ask_email(message)
        else:
            # –ò–ª–∏ –≤–≤—ë–ª –≤—Ä—É—á–Ω—É—é?
            text = message.text.strip()
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ—á–µ–Ω—å —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)
            # –¥–æ–ø—É—Å—Ç–∏–º +7, 8, 10-–∑–Ω–∞—á–Ω—ã–π, etc.
            pattern = r'^[\d+()\-\s]{5,}$'
            if re.match(pattern, text):
                await message.answer(f"–ü—Ä–∏–Ω—è–ª —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {text}")
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É email
                users_data[user_id]["collect_state"] = "email"
                await ask_email(message)
            else:
                await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç.")

    elif state == "email":
        text = message.text.strip()
        # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
        email_pattern = r'^[^@]+@[^@]+\.[^@]+$'
        if re.match(email_pattern, text):
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! Email –ø—Ä–∏–Ω—è—Ç.")
            # –í—ã–¥–∞—ë–º –ø—Ä–æ–º–æ–∫–æ–¥
            await message.answer("–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: <b>–ø–æ–¥–ø–∏—Å–∫–∞24</b>\n\n–°–∫–∏–¥–∫–∞ 10% –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑!", parse_mode="HTML")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            users_data[user_id]["collect_state"] = None
        else:
            await message.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ email. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ, –∫–æ–≥–¥–∞ –º—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        pass

###############################################################################
# –•–ï–ù–î–õ–ï–†: "–Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø"
###############################################################################
@dp.callback_query(F.data == "i_subscribed")
async def on_subscribed_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    update_user_activity(user_id)

    if await check_subscription(user_id):
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏
        users_data[user_id]["subscribed_at"] = asyncio.get_event_loop().time()

        text_subscribed = (
            "üëÄ –í–∏–∂—É –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞!\n\n"
            "–°–ø–µ—à–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üëá"
        )
        keyboard_order = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="ü•Ç–ó–∞–∫–∞–∑–∞—Ç—å", url=ORDER_BOT_LINK)
            ],
            [
                InlineKeyboardButton(text="‚úçüèº–û—Ç–∑—ã–≤—ã", url=REVIEWS_CHANNEL_LINK)
            ]
        ])
        await callback_query.message.answer(
            text_subscribed,
            parse_mode="HTML",
            reply_markup=keyboard_order
        )
    else:
        # –ï—Å–ª–∏ –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω
        text_not_subscribed = (
            "üôà –ù–µ –≤–∏–∂—É —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª ¬´–ê–ª–∫–æ—Ä–∞–∫–µ—Ç–∞¬ªüöÄ\n\n"
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ –¥–æ–º."
        )
        await callback_query.message.answer(
            text_not_subscribed,
            parse_mode="HTML"
        )

    await callback_query.answer()

###############################################################################
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –ó–ê–ü–†–û–°–ê: –¢–ï–õ–ï–§–û–ù, EMAIL
###############################################################################
async def ask_phone(message: types.Message):
    """
    –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç" (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –º–æ–±–∏–ª—å–Ω–æ–º Telegram).
    """
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "–£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ).",
        reply_markup=kb
    )

async def ask_email(message: types.Message):
    """
    –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ email.
    """
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π e-mail:",
        reply_markup=ReplyKeyboardRemove()
    )

###############################################################################
# –§–£–ù–ö–¶–ò–Ø: –û–¢–ü–†–ê–í–ö–ê "–ü–û–î–ê–†–û–ö" –ß–ï–†–ï–ó 24 –ß–ê–°–ê
###############################################################################
async def send_gift_message(user_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü—Ä–∏–≤–µ—Ç, –≤—á–µ—Ä–∞ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è... –•–æ—á–µ—à—å –ø–æ–¥–∞—Ä–æ–∫?"
    """
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –í—á–µ—Ä–∞ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, –∏ —Å–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è üéÅ\n"
        "–•–æ—á–µ—à—å –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–•–æ—á—É –ø–æ–¥–∞—Ä–æ–∫üéÅ", callback_data="get_gift")]
    ])
    try:
        await bot.send_message(
            chat_id=user_id,
            text=text,
            parse_mode="HTML",
            reply_markup=kb
        )
    except:
        pass

###############################################################################
# –•–ï–ù–î–õ–ï–†: "–•–û–ß–£ –ü–û–î–ê–†–û–ö" (–∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ 24 —á–∞—Å–æ–≤)
###############################################################################
@dp.callback_query(F.data == "get_gift")
async def on_get_gift(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    update_user_activity(user_id)

    # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (phone, email)
    users_data[user_id]["collect_state"] = "phone"
    await callback_query.answer()
    # –ü—Ä–æ—Å–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω
    await ask_phone(callback_query.message)

###############################################################################
# –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê –î–õ–Ø –ë–ï–ó–î–ï–ô–°–¢–í–ò–Ø –ò –ü–û–î–ê–†–ö–ê
###############################################################################
async def background_tasks():
    while True:
        now = asyncio.get_event_loop().time()
        for user_id, data in list(users_data.items()):
            last_activity = data["last_activity"]

            # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ (–µ—Å–ª–∏ inactivity_msg_sent=False –∏ > INACTIVITY_LIMIT)
            if not data["inactivity_msg_sent"]:
                if now - last_activity > INACTIVITY_LIMIT:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ 1 —Ä–∞–∑
                    try:
                        await bot.send_message(
                            chat_id=user_id,
                            text="–≠–π, —Ç—ã –≥–¥–µ? –¢—ã —Ç–∞–∫ –∏ –Ω–µ –Ω–∞–∂–∞–ª –Ω–∏–∫–∞–∫–∏—Ö –∫–Ω–æ–ø–æ–∫...",
                        )
                    except:
                        pass
                    data["inactivity_msg_sent"] = True

            # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞
            if data["subscribed_at"] > 0 and not data["gift_msg_sent"]:
                # –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                time_since_sub = now - data["subscribed_at"]
                if time_since_sub >= GIFT_DELAY:
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –ø–æ–¥–∞—Ä–æ–∫
                    await send_gift_message(user_id)
                    data["gift_msg_sent"] = True

        await asyncio.sleep(CHECK_INACTIVITY_INTERVAL)

###############################################################################
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
###############################################################################
async def main():
    asyncio.create_task(background_tasks())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())