import asyncio
import logging
import re
import time
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

###############################################################################
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø (—á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
###############################################################################
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
CHANNEL_INVITE_LINK = os.getenv("CHANNEL_INVITE_LINK")
REVIEWS_CHANNEL_LINK = os.getenv("REVIEWS_CHANNEL_LINK")
ORDER_BOT_LINK = os.getenv("ORDER_BOT_LINK")
PHOTO_FILE_ID = os.getenv("PHOTO_FILE_ID")
PRIVATE_INFO_CHANNEL_ID = int(os.getenv("PRIVATE_INFO_CHANNEL_ID"))

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞–π–º–∏–Ω–≥–æ–≤
# –î–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
INACTIVITY_LIMITS_NOT_SUBSCRIBED = [600, 1500, 86400]  # 10 –º–∏–Ω—É—Ç, 25 –º–∏–Ω—É—Ç, 24 —á–∞—Å–∞
# –î–ª—è –∑–∞–≤–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
INACTIVITY_LIMIT_DATA_COLLECTION = 300  # 5 –º–∏–Ω—É—Ç
# –î–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–ª–∏–∫–±–µ–π—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
INACTIVITY_LIMITS_SUBSCRIBED = [
    86400,      # 1 –¥–µ–Ω—å
    259200,     # 3 –¥–Ω—è
    604800,     # 1 –Ω–µ–¥–µ–ª—è
    1209600,    # 2 –Ω–µ–¥–µ–ª–∏
    2592000,    # 1 –º–µ—Å—è—Ü
    7776000,    # 3 –º–µ—Å—è—Ü–∞
    15552000    # 6 –º–µ—Å—è—Ü–µ–≤
]
CHECK_INACTIVITY_INTERVAL = 30  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
GIFT_DELAY = 86400  # 24 —á–∞—Å–∞

# –ê–Ω—Ç–∏—Å–ø–∞–º: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
ANTI_SPAM_INTERVAL = 1  # 1 —Å–µ–∫—É–Ω–¥–∞

# –ö–ª–∏–∫–±–µ–π—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
INACTIVITY_MESSAGES_NOT_SUBSCRIBED = [
    "üîî –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ —Å–¥–µ–ª–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑! üöÄ",
    "‚è≥ –¢—ã –≤—Å—ë –µ—â—ë —Å –Ω–∞–º–∏? –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è! ü•Ç",
    "üéâ –ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Å–∫–∏–¥–∫–∞–º! üçæ"
]

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–∏—Å–∞–Ω–∏–∏ –Ω–∞ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
INACTIVITY_MESSAGE_DATA_COLLECTION = "üéÅ –ü–æ–¥–∞—Ä–æ–∫ —É–∂–µ —Ç–∞–∫ –±–ª–∏–∑–∫–æ! –ó–∞–≤–µ—Ä—à–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –µ–≥–æ –∑–∞–±—Ä–∞—Ç—å! ‚ú®"

# –ö–ª–∏–∫–±–µ–π—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
INACTIVITY_MESSAGES_SUBSCRIBED = [
    "üöÄ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ —É–∂–µ –≤ –ø—É—Ç–∏! üéâ\n\n–û–π, –∫–∞–∂–µ—Ç—Å—è, —è –ø–µ—Ä–µ–ø—É—Ç–∞–ª! üòÖ –ù–µ –≤–∏–∂—É —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞... –ù–æ —ç—Ç–æ –ª–µ–≥–∫–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å ‚Äî –æ—Ñ–æ—Ä–º–∏ –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! ü•Ç",
    "üì¶ –í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å—ë –ª–∏ –Ω–∞ –º–µ—Å—Ç–µ! üöö\n\n–£–ø—Å, –º–æ—è –æ—à–∏–±–∫–∞! üò≥ –ó–∞–∫–∞–∑–∞ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ —è –º–µ—á—Ç–∞—é, —á—Ç–æ–±—ã —Ç—ã –µ–≥–æ –æ—Ñ–æ—Ä–º–∏–ª! –°–∫–æ—Ä–µ–µ –∑–∞–∫–∞–∂–∏! üçæ",
    "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –°–∫–æ—Ä–æ –≤—Å—ë –±—É–¥–µ—Ç —É –≤–∞—Å! ‚ú®\n\n–ò–∑–≤–∏–Ω–∏, –∫–∞–∂–µ—Ç—Å—è, –∑–¥–µ—Å—å –æ—à–∏–±–∫–∞... üòÖ –ê —è —É–∂–µ –æ–±—Ä–∞–¥–æ–≤–∞–ª—Å—è! –ù–µ –æ–≥–æ—Ä—á–∞–π –º–µ–Ω—è —Ç–∞–∫, —Å–¥–µ–ª–∞–π –∑–∞–∫–∞–∑! üöÄ",
    "üöö –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ–ø–ª–∞—á–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—Å! –ö—É—Ä—å–µ—Ä –≤—ã–µ–∑–∂–∞–µ—Ç! üéâ\n\n–í–æ–∑–º–æ–∂–Ω–æ, –º—ã –ø–æ—Ç–æ—Ä–æ–ø–∏–ª–∏—Å—å? üò≥ –ü–æ—Ö–æ–∂–µ, –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ —Å–¥–µ–ª–∞–π –∑–∞–∫–∞–∑! ü•Ç",
    "ü•≥ –í–∞—à –∑–∞–∫–∞–∑ —É–∂–µ –µ–¥–µ—Ç –∫ –≤–∞–º! –û–∂–∏–¥–∞–π—Ç–µ –∫—É—Ä—å–µ—Ä–∞! üöö\n\n–û–π, –∫–∞–∂–µ—Ç—Å—è, —è –æ—à–∏–±—Å—è! üòú –ó–∞–∫–∞–∑–∞ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ —è —Ç–∞–∫ —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –µ–≥–æ —Å–¥–µ–ª–∞–ª! –û—Ñ–æ—Ä–º–∏ –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å! ü•Ç",
    "üçæ –û–ø–ª–∞—Ç–∞ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑ –ø—Ä–æ—à–ª–∞! –°–∫–æ—Ä–æ –≤—Å—ë –±—É–¥–µ—Ç —É –≤–∞—Å! üéâ\n\n–£–ø—Å, –ø–µ—Ä–µ–ø—É—Ç–∞–ª! üò≥ –ó–∞–∫–∞–∑–∞ –Ω–µ—Ç, –Ω–æ —ç—Ç–æ –º–æ–∏ –º–µ—á—Ç—ã! –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –∏—Ö —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é ‚Äî –æ—Ñ–æ—Ä–º–∏ –∑–∞–∫–∞–∑! üçæ",
    "üèÜ –í–∞—à –∑–∞–∫–∞–∑ —É–∂–µ –≤ –ø—É—Ç–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏! üöÄ\n\n–û—Ö, –º–æ—è –æ—à–∏–±–∫–∞! üòÖ –ù–µ –≤–∏–∂—É –∑–∞–∫–∞–∑–∞, –Ω–æ —è —Ç–∞–∫ —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –µ–≥–æ —Å–¥–µ–ª–∞–ª! –û—Ñ–æ—Ä–º–∏ –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É! ‚ú®"
]

###############################################################################
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
###############################################################################
logging.basicConfig(level=logging.INFO)

###############################################################################
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
###############################################################################
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_data = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞: —Ö—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
last_message_time = {}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class CollectData(StatesGroup):
    phone = State()
    email = State()

def update_user_activity(user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in users_data:
        users_data[user_id] = {
            "last_activity": time.time(),
            "inactivity_messages_not_subscribed": [False] * len(INACTIVITY_LIMITS_NOT_SUBSCRIBED),  # –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö
            "inactivity_message_data_collection_sent": False,  # –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –∑–∞–≤–∏—Å–∞–Ω–∏–∏ –Ω–∞ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
            "inactivity_messages_subscribed": [False] * len(INACTIVITY_LIMITS_SUBSCRIBED,  # –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö
            "subscribed_at": 0,
            "gift_msg_sent": False,
            "promo_received": False,
            "last_state": None  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        }
    else:
        users_data[user_id]["last_activity"] = time.time()

async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª."""
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        try:
            await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        except Exception as send_err:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {send_err}")
        return False

def get_main_keyboard(user_firstname: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    caption_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_firstname}!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–õ–ö–û–†–ê–ö–ï–¢–êüöÄ\n"
        "–ú—ã –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–ø–∏—Ç–∫–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º.\n\n"
        "‚ú® –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ:\n"
        "üî• –ì–æ—Ä—è—á–∏—Ö –∞–∫—Ü–∏–π –∏ —Å–∫–∏–¥–æ–∫.\n"
        "üçæ –ù–æ–≤–∏–Ω–æ–∫ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.\n"
        "üéâ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n\n"
        "‚¨á–î–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª‚¨á"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_INVITE_LINK)],
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="i_subscribed")],
        [InlineKeyboardButton(text="‚úçüèº –û—Ç–∑—ã–≤—ã", url=REVIEWS_CHANNEL_LINK)]
    ])
    return caption_text, keyboard

# –ê–Ω—Ç–∏—Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä
async def anti_spam_filter(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    current_time = time.time()
    last_time = last_message_time.get(user_id, 0)
    if current_time - last_time < ANTI_SPAM_INTERVAL:
        return False  # –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    last_message_time[user_id] = current_time
    return True  # –ú–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å

###############################################################################
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
###############################################################################
@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not await anti_spam_filter(user_id):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ
    update_user_activity(user_id)
    await state.clear()
    user_firstname = message.from_user.first_name or "–¥—Ä—É–≥"
    caption_text, keyboard = get_main_keyboard(user_firstname)
    await message.answer_photo(photo=PHOTO_FILE_ID, caption=caption_text, reply_markup=keyboard)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    user_id = message.from_user.id
    if not await anti_spam_filter(user_id):
        return
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    await message.answer(help_text)

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not await anti_spam_filter(user_id):
        return
    update_user_activity(user_id)
    await state.clear()
    users_data[user_id]["last_state"] = None
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())

###############################################################################
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø"
###############################################################################
@dp.callback_query(F.data == "i_subscribed")
async def on_subscribed_button(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if not await anti_spam_filter(user_id):
        return
    update_user_activity(user_id)
    if await check_subscription(user_id):
        users_data[user_id]["subscribed_at"] = time.time()
        text_subscribed = "üëÄ –í–∏–∂—É –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞!\n\n–°–ø–µ—à–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üëá"
        keyboard_order = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü•Ç –ó–∞–∫–∞–∑–∞—Ç—å", url=ORDER_BOT_LINK)],
            [InlineKeyboardButton(text="‚úçüèº –û—Ç–∑—ã–≤—ã", url=REVIEWS_CHANNEL_LINK)]
        ])
        await callback_query.message.answer(text_subscribed, reply_markup=keyboard_order)
    else:
        text_not_subscribed = "üôà –ù–µ –≤–∏–∂—É —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª ¬´–ê–ª–∫–æ—Ä–∞–∫–µ—Ç–∞¬ªüöÄ\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ –¥–æ–º."
        await callback_query.message.answer(text_not_subscribed)
    await callback_query.answer()

###############################################################################
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–î–ê, –•–û–ß–£ –ü–û–î–ê–†–û–ö!"
###############################################################################
@dp.callback_query(F.data == "get_gift")
async def on_get_gift(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if not await anti_spam_filter(user_id):
        return
    update_user_activity(user_id)
    await state.set_state(CollectData.phone)
    users_data[user_id]["last_state"] = "CollectData.phone"
    await callback_query.answer()
    await ask_phone(callback_query.message)

###############################################################################
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ü–†–û–°–ê –¢–ï–õ–ï–§–û–ù–ê –ò EMAIL
###############################################################################
async def ask_phone(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç').", reply_markup=kb)

async def ask_email(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–ü–æ–¥–∞—Ä–æ–∫ —É–∂–µ –±–ª–∏–∑–∫–æ, –æ—Å—Ç–∞–ª–æ—Å—å —á—É—Ç—å-—á—É—Ç—åü§èüèº –ù–∞–ø–∏—à–∏ —Å–≤–æ–π email –∏ –ø–æ–¥–∞—Ä–æ–∫ —Ç–≤–æ–π! üéÅ", reply_markup=kb)

###############################################################################
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –í –°–û–°–¢–û–Ø–ù–ò–ò –°–ë–û–†–ê –î–ê–ù–ù–´–•
###############################################################################
@dp.message(CollectData.phone)
async def process_phone(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not await anti_spam_filter(user_id):
        return
    update_user_activity(user_id)
    users_data[user_id]["last_state"] = "CollectData.phone"
    if message.text and message.text.strip() == "–ù–∞–∑–∞–¥":
        await state.clear()
        users_data[user_id]["last_state"] = None
        await message.answer("–í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
        return

    if message.contact:
        phone = message.contact.phone_number
    else:
        text = message.text.strip()
        phone_pattern = r'^\+?\d{9,15}$'
        if re.match(phone_pattern, text):
            phone = text
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ù–∞–∑–∞–¥'.")
            return
    await state.update_data(phone=phone)
    await message.answer(f"–ü—Ä–∏–Ω—è–ª —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}", reply_markup=ReplyKeyboardRemove())
    await state.set_state(CollectData.email)
    users_data[user_id]["last_state"] = "CollectData.email"
    await ask_email(message)

@dp.message(CollectData.email)
async def process_email(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not await anti_spam_filter(user_id):
        return
    update_user_activity(user_id)
    users_data[user_id]["last_state"] = "CollectData.email"
    if message.text.strip() == "–ù–∞–∑–∞–¥":
        await state.set_state(CollectData.phone)
        users_data[user_id]["last_state"] = "CollectData.phone"
        await ask_phone(message)
        return

    text = message.text.strip()
    email_pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    if re.match(email_pattern, text):
        await state.update_data(email=text)
        data = await state.get_data()
        phone = data.get("phone", "")
        email = data.get("email", "")
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! Email –ø—Ä–∏–Ω—è—Ç.", reply_markup=ReplyKeyboardRemove())
        if not users_data[user_id]["promo_received"]:
            promo_message = (
                "–õ–æ–≤–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫! üéÅ –°–∫–∏–¥–∫–∞ 10% –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑! "
                "–ù–∞–∑–æ–≤–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ–º–æ–∫–æ–¥ <tg-spoiler>–ü–û–î–ü–ò–°–ö–ê24</tg-spoiler>"
            )
            await message.answer(promo_message)
            users_data[user_id]["promo_received"] = True
            user_info = (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.first_name}\n"
                f"–ù–æ–º–µ—Ä: {phone}\n"
                f"Email: {email}"
            )
            try:
                await bot.send_message(chat_id=PRIVATE_INFO_CHANNEL_ID, text=user_info)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è {user_id}: {e}")
        await state.clear()
        users_data[user_id]["last_state"] = None
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ù–∞–∑–∞–¥'.")

###############################################################################
# –§–£–ù–ö–¶–ò–Ø: –û–¢–ü–†–ê–í–ö–ê –ü–û–î–ê–†–û–ß–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø –ß–ï–†–ï–ó 24 –ß–ê–°–ê
###############################################################################
async def send_gift_message(user_id: int):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –í—á–µ—Ä–∞ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, –∞ —Å–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å –¥–ª—è —Ç–µ–±—è –ø–æ–¥–∞—Ä–æ–∫üéÅ\n"
        "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ? üòÅ"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —Ö–æ—á—É –ø–æ–¥–∞—Ä–æ–∫! üéÅ", callback_data="get_gift")]
    ])
    try:
        await bot.send_message(chat_id=user_id, text=text, reply_markup=kb)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id}: {e}")

###############################################################################
# –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê
###############################################################################
async def background_tasks():
    while True:
        now = time.time()
        tasks = []
        for user_id, data in list(users_data.items()):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if data.get("subscribed_at", 0) == 0:
                for i, limit in enumerate(INACTIVITY_LIMITS_NOT_SUBSCRIBED):
                    if not data["inactivity_messages_not_subscribed"][i] and (now - data["last_activity"] > limit):
                        tasks.append(bot.send_message(chat_id=user_id, text=INACTIVITY_MESSAGES_NOT_SUBSCRIBED[i]))
                        data["inactivity_messages_not_subscribed"][i] = True

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —ç—Ç–∞–ø–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            if data.get("last_state") in ["CollectData.phone", "CollectData.email"]:
                if not data["inactivity_message_data_collection_sent"] and (now - data["last_activity"] > INACTIVITY_LIMIT_DATA_COLLECTION):
                    tasks.append(bot.send_message(chat_id=user_id, text=INACTIVITY_MESSAGE_DATA_COLLECTION))
                    data["inactivity_message_data_collection_sent"] = True

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if data.get("subscribed_at", 0) > 0 and not data["gift_msg_sent"] and not data.get("promo_received", False):
                time_since_sub = now - data["subscribed_at"]
                if time_since_sub >= GIFT_DELAY:
                    tasks.append(send_gift_message(user_id))
                    data["gift_msg_sent"] = True

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–∫–±–µ–π—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if data.get("subscribed_at", 0) > 0:
                time_since_sub = now - data["subscribed_at"]
                for i, limit in enumerate(INACTIVITY_LIMITS_SUBSCRIBED):
                    if not data["inactivity_messages_subscribed"][i] and (time_since_sub > limit):
                        tasks.append(bot.send_message(chat_id=user_id, text=INACTIVITY_MESSAGES_SUBSCRIBED[i]))
                        data["inactivity_messages_subscribed"][i] = True

        if tasks:
            try:
                await asyncio.gather(*tasks)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö: {e}")
        await asyncio.sleep(CHECK_INACTIVITY_INTERVAL)

###############################################################################
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
###############################################################################
async def main():
    asyncio.create_task(background_tasks())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
